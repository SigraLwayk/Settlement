# 詳細設計書

## 機能概要
本アプリケーションは施設管理シミュレーション向けに、生産施設の設定と年間収支を計算して表示するWebアプリです。各施設の数や使用資源を入力すると、年間生産量を集計して表形式で示します。入力値はブラウザのローカルストレージに保存され、次回訪問時にも復元されます。

## HTML構成
- `index.html` にテーブル `#facilityTable` が配置され、表の行は JavaScript により生成されます。
- テーブルはヘッダ行と tbody からなり、tbody 内の行要素に施設ごとの情報が挿入されます。
- 施設数の入力欄や資源選択のドロップダウンが各行に含まれています。

## JavaScript構成
### data.js
- `facilities` 定数に施設定義をまとめています。施設ごとに使用資源、生産物、サイクル日数、従業員数などを保持します。
- 値はオブジェクト形式で管理され、選択可能な資源は配列として指定できます。

### func.js
- `Func` クラスは表示処理の補助を行います。
    - `totalSetter()` は入力値から年間生産量を計算し、Map 形式のデータに組み込みます。
    - `renderCell()` は配列の場合に選択ボックスを、単一値ならそのままセル要素を生成します。
    - `firstGetter()` は配列内の 1 番目の値を取得するユーティリティです。

### monado.js
- `Monado.updater()` が各施設行を再生成し、入力値に応じた年間生産量を計算します。
- 内部で `productMap` を構築し、生産物や使用資源ごとの年間合計を集計します。
- 収支量に応じて行に `positive` や `negative` などのクラスを付与し、色分けを行います。
 - 行生成前に `tbody` を空にして前回の内容をクリアします。
 - `facilitiesData` を走査して行を生成しながら `productMap` に集計します。
 - 集計後、テーブル行を再度走査し各行の年間収支セルを更新します。
 - 収支値のしきい値により `morePositive`・`positive`・`negative` を付与します。

### eventListeners.js
- `DOMContentLoaded` イベントで監視処理を登録します。
- 施設数入力欄の `input` イベントでは値をローカルストレージへ保存し、`Monado.updater()` を呼び出します。
- 使用資源のセレクトボックス変更時も同様に値を保存して再計算を行います。
 - 適用しているイベントは次の3種類です: `DOMContentLoaded`、`input`、`change`。

## データ保存方式
- ローカルストレージのキーは施設名を基準とし、資源の選択値は `施設名useItemN` の形式で格納します。
- 計算結果自体は保存せず、ページ読込時に `Monado.updater()` が再計算します。

## テーブル更新処理
1. ページ読込後、`Monado.updater()` が `facilities` の内容を走査し、行要素を tbody に追加します。
2. 各行の入力欄で値を変更するとイベントリスナーが発火し、該当データを保存後に再度 `updater` を実行します。
3. `productMap` によって資源ごとの合計値を計算し、年間収支のセルへ反映します。

## 拡張の留意点
- 新しい施設を追加する場合は `data.js` の `facilities` 定義に追記します。
- 収支計算ロジックを変更したい場合は `Monado.updater()` の計算式を修正します。
- 表示スタイルの変更は `css/styles.css` に記述します。
